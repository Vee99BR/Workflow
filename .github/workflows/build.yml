name: Build

on:
  workflow_call:
    inputs:
      build-type:
        description: 'What build type to use (e.g. RelWithDebInfo, Release)'
        type: string
        default: 'Release'
      devel:
        description: 'Development mode (disables update checker, adds nightly qualifier)'
        type: boolean
        default: true
      webengine:
        description: 'Use QtWebEngine. Increases build size by 60-90MB.'
        type: boolean
        default: false
      multimedia:
        description: 'Use QtMultimedia. Increases build size by 20MB.'
        type: boolean
        default: false
      build-id:
        description: 'Identifier for workflows and caching'
        type: string
        default: 'master'

env:
  DISABLE_ARM: ${{ vars.DISABLE_ARM }}
  SCCACHE_GHA_ENABLED: "true"
  CCACHE: "true"

jobs:
  summary:
    name: "Summary"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse Forgejo payload
        shell: bash
        run: |
          export PAYLOAD_JSON='${{ toJSON(github.event.client_payload) }}'
          export FORGEJO_TOKEN=${{ secrets.FORGEJO_TOKEN }}
          ./.ci/parse.sh ${{ inputs.build-id }}

      - name: Create job summary
        run: |
          export FORGEJO_TOKEN=${{ secrets.FORGEJO_TOKEN }}
          ./.ci/summary.sh ${{ inputs.build-id }}

  clone:
    name: "Clone"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse Forgejo payload
        shell: bash
        run: |
          export PAYLOAD_JSON='${{ toJSON(github.event.client_payload) }}'
          export FORGEJO_TOKEN=${{ secrets.FORGEJO_TOKEN }}
          ./.ci/parse.sh ${{ inputs.build-id }}

      - name: Clone
        shell: bash
        run: ./.ci/clone.sh ${{ inputs.build-id }}

      - name: Cleanup
        run: |
          cd eden
          rm -rf .git* .ci .github docs

      - name: Upload cloned repo
        uses: actions/upload-artifact@v4
        with:
          name: eden
          include-hidden-files: true
          path: |
            eden/*
            eden/.patch

  source:
    name: "Source Pack"
    runs-on: ubuntu-latest
    needs: [clone]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone
        uses: actions/download-artifact@v4

      - name: Configure
        run: ./.ci/source/configure.sh

      - name: Pack
        run: ./.ci/source/pack.sh

      - name: Upload source
        uses: actions/upload-artifact@v4.6.2
        with:
          name: source
          path: source.*

  set-matrix:
    name: "Generate Linux matrix"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
      compilers: ${{ steps.set.outputs.compilers }}
    steps:
      - id: set
        run: |
          BASE='[{"runs-on": "ubuntu-latest", "arch": "amd64"},{"runs-on": "ubuntu-latest", "arch": "steamdeck"}'
          ARM=',{"runs-on": "ubuntu-24.04-arm", "arch": "aarch64"}'

          if [ "${{ env.DISABLE_ARM }}" != true ]; then
            BASE="${BASE}${ARM}"
          fi

          EXTRA=',{"runs-on": "ubuntu-latest", "arch": "legacy"},{"runs-on": "ubuntu-latest", "arch": "rog-ally"}'
          ARM=',{"runs-on": "ubuntu-24.04-arm", "arch": "armv9"}'

          if [ "${{ env.DISABLE_ARM }}" != true ]; then
            EXTRA="${EXTRA}${ARM}"
          fi

          if [ "${{ inputs.build-id }}" = "tag" ]; then
            MATRIX="${BASE}${EXTRA}]"
          else
            MATRIX="${BASE}]"
          fi

          echo $MATRIX
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

          if [ "${{ inputs.build-id }}" = "tag" ]; then
            COMPILERS='["clang", "gcc"]'
          else
            COMPILERS='["gcc"]'
          fi

          echo $COMPILERS
          echo "compilers=${COMPILERS}" >> $GITHUB_OUTPUT

  linux:
    name: "Linux (${{ matrix.os.arch }}) (${{ matrix.compiler }})"
    needs: [set-matrix, clone]
    runs-on: ${{ matrix.os.runs-on }}
    container: ghcr.io/pkgforge-dev/archlinux:latest
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
        compiler: ${{ fromJson(needs.set-matrix.outputs.compilers) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install sccache
        uses: Vee99BR/sccache-action@v0.0.1

      - name: Install dependencies
        run: |
          chmod a+x ./.ci/linux/deps.sh
          ./.ci/linux/deps.sh

      # TODO(crueter): PGO
      - name: Set build variables
        shell: bash
        run: |
          echo "BUILD_TYPE=${{ inputs.build-type }}" >> $GITHUB_ENV
          echo "DEVEL=${{ inputs.devel }}" >> $GITHUB_ENV
          echo "USE_WEBENGINE=${{ inputs.webengine }}" >> $GITHUB_ENV
          echo "USE_MULTIMEDIA=${{ inputs.multimedia }}" >> $GITHUB_ENV
          echo "COMPILER=${{ matrix.compiler }}" >> $GITHUB_ENV

      - name: Parse Forgejo payload
        shell: bash
        run: |
          export PAYLOAD_JSON='${{ toJSON(github.event.client_payload) }}'
          export FORGEJO_TOKEN=${{ secrets.FORGEJO_TOKEN }}
          ./.ci/parse.sh ${{ inputs.build-id }}

      - name: Clone
        uses: actions/download-artifact@v4
        with:
          name: eden

      - name: Set up CPM cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/build/_deps/*-build
          key: ${{ runner.os }}-${{ matrix.os.arch }}-${{ matrix.compiler }}-cpm-${{ env.CPM_CACHE_VERSION }}

      - name: Build
        shell: bash
        run: |
          TARGET=appimage ./.ci/linux/build.sh ${{ matrix.os.arch }} -DCCACHE_PATH=${SCCACHE_PATH}

      - name: Package
        shell: bash
        run: |
          ./.ci/linux/package.sh ${{ matrix.os.arch }}

      - name: Package (binary)
        run: |
          cmake --install build --prefix install/usr

          cd install
          tar --owner root --group root --zstd -cf Eden-Linux.tar.zst *

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary-${{ matrix.os.arch }}-${{ matrix.compiler }}
          path: install/Eden-Linux.tar.zst

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: linux-${{ matrix.os.arch }}-${{ matrix.compiler }}
          path: ./*.AppImage*

  windows:
    name: "Windows ${{ matrix.os.arch }} (${{ matrix.compiler }})"
    needs: [clone]
    runs-on: ${{ matrix.os.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - runs-on: windows-latest
            arch: amd64
          - runs-on: windows-11-arm
            arch: arm64
        compiler: [clang, msvc]
    env:
      QT_VERSION: 6.9.1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install sccache
        uses: Vee99BR/sccache-action@v0.0.1

      - name: Install Qt
        uses: jurplel/install-qt-action@v4.3.0
        with:
          version: ${{ env.QT_VERSION }}
          cache: 'true'

      - name: Set build variables
        shell: bash
        run: |
          echo "BUILD_TYPE=${{ inputs.build-type }}" >> $GITHUB_ENV
          echo "DEVEL=${{ inputs.devel }}" >> $GITHUB_ENV
          echo "USE_WEBENGINE=${{ inputs.webengine }}" >> $GITHUB_ENV
          echo "USE_MULTIMEDIA=${{ inputs.multimedia }}" >> $GITHUB_ENV
          echo "COMPILER=${{ matrix.compiler }}" >> $GITHUB_ENV

      - name: Parse Forgejo payload
        shell: bash
        run: |
          pip install requests
          export PAYLOAD_JSON='${{ toJSON(github.event.client_payload) }}'
          export FORGEJO_TOKEN=${{ secrets.FORGEJO_TOKEN }}
          ./.ci/parse.sh ${{ inputs.build-id }}

      - name: Clone
        uses: actions/download-artifact@v4
        with:
          name: eden

      - name: Set up CPM cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/build/_deps/*-build
          key: ${{ runner.os }}-${{ matrix.os.arch }}-${{ matrix.compiler }}-cpm-${{ env.CPM_CACHE_VERSION }}

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.os.arch }}

      - name: Force Clang 20
        if: matrix.compiler == 'clang'
        shell: bash
        run: |
          echo "C:/Program Files/LLVM/bin" >> $GITHUB_PATH
          clang-cl --version

      - name: Install Vulkan SDK
        shell: powershell
        run: |
          ./.ci/windows/install-vulkan-sdk.ps1

      - name: Build
        shell: bash
        run: |
          export WINDEPLOYQT=windeployqt
          git config --global core.autocrlf off
          dos2unix .patch/boost/*

          ./.ci/windows/build.sh -DCCACHE_PATH=${SCCACHE_PATH}

      - name: Package
        shell: bash
        run: |
          export ARCH=${{ matrix.os.arch }}-${{ matrix.compiler }}
          ./.ci/windows/package.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: windows-${{ matrix.os.arch }}-${{ matrix.compiler }}
          path: artifacts/*

  android:
    name: "Android"
    needs: [clone]
    runs-on: ${{ matrix.os.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - runs-on: ubuntu-latest
            arch: amd64
        compiler: [universal]

    steps:
      - name: Check Android secrets
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "CI_PR_FORK=true" >> $GITHUB_ENV
          else
            if [ -z "${ANDROID_KEYSTORE_B64}" ] || \
               [ -z "${ANDROID_KEY_ALIAS}" ] || \
               [ -z "${ANDROID_KEYSTORE_PASS}" ]; then
              echo "::error ::Missing required Android secrets!"
              exit 1
            fi
          fi
        env:
          ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_B64 }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install sccache
        uses: Vee99BR/sccache-action@v0.0.1

      - name: Install dependencies
        run: |
          ./.ci/android/deps.sh

      - name: Parse Forgejo payload
        shell: sh
        run: |
          export PAYLOAD_JSON='${{ toJSON(github.event.client_payload) }}'
          export FORGEJO_TOKEN=${{ secrets.FORGEJO_TOKEN }}
          ./.ci/parse.sh ${{ inputs.build-id }}

      - name: Clone
        uses: actions/download-artifact@v4
        with:
          name: eden

      - name: Install gradle-cache
        uses: burrunan/gradle-cache-action@v3
        with:
          job-id: android
          gradle-version: wrapper
          save-local-build-cache: true
          save-gradle-dependencies-cache: true
          remote-build-cache-proxy-enabled: true
          build-root-directory: src/android

      - name: Set up CPM cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/build/_deps/*-build
          key: ${{ runner.os }}-${{ matrix.os.arch }}-${{ matrix.compiler }}-cpm-${{ env.CPM_CACHE_VERSION }}

      - name: Build
        run: |
          JAVA_HOME=$JAVA_HOME_17_X64 DEVEL=true ./.ci/android/build.sh -DCCACHE_PATH=${SCCACHE_PATH}
        env:
          ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_B64 }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}

      - name: Package
        run: |
          ./.ci/android/package.sh

      - name: Upload APK
        uses: actions/upload-artifact@v4.6.2
        with:
          name: android
          path: artifacts/*.apk

      - name: Upload AAB
        uses: actions/upload-artifact@v4.6.2
        with:
          name: android-aab
          path: artifacts/*.aab

  macos:
    name: "macOS"
    needs: [clone]
    runs-on: ${{ matrix.os.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - runs-on: macos-latest
            arch: arm64
        compiler: [universal]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install sccache
        uses: Vee99BR/sccache-action@v0.0.1

      - name: Install dependencies
        run: ./.ci/macos/deps.sh

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.7.3
          cache: 'true'

      - name: Set build variables
        shell: bash
        run: |
          echo "BUILD_TYPE=${{ inputs.build-type }}" >> $GITHUB_ENV
          echo "DEVEL=${{ inputs.devel }}" >> $GITHUB_ENV
          echo "USE_WEBENGINE=${{ inputs.webengine }}" >> $GITHUB_ENV
          echo "USE_MULTIMEDIA=${{ inputs.multimedia }}" >> $GITHUB_ENV

      - name: Parse Forgejo payload
        shell: sh
        run: |
          export PAYLOAD_JSON='${{ toJSON(github.event.client_payload) }}'
          export FORGEJO_TOKEN=${{ secrets.FORGEJO_TOKEN }}
          ./.ci/parse.sh ${{ inputs.build-id }}

      - name: Clone
        uses: actions/download-artifact@v4
        with:
          name: eden

      - name: Set up CPM cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/build/_deps/*-build
          key: ${{ runner.os }}-${{ matrix.os.arch }}-${{ matrix.compiler }}-cpm-${{ env.CPM_CACHE_VERSION }}

      - name: Build
        run: |
          ./.ci/macos/build.sh -DCCACHE_PATH=${SCCACHE_PATH}

      - name: Package
        run: |
          ./.ci/macos/package.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: macos
          path: artifacts/*
